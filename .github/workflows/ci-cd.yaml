name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  Build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          pip install bandit

      - name: Run Bandit
        run: |
          bandit -r project
   
      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose  

      - name: Load environment variables
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          MYSQL_HOST: ${{ secrets.MYSQL_HOST }}
        run: |
          echo "MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}" > app/.env
          echo "MYSQL_DATABASE=${MYSQL_DATABASE}" >> app/.env
          echo "MYSQL_USER=${MYSQL_USER}" >> app/.env
          echo "MYSQL_PASSWORD=${MYSQL_PASSWORD}" >> app/.env
          echo "MYSQL_HOST=${MYSQL_HOST}" >> app/.env

      - name: Docker-Compose Up, Build and Curl Testing 
        run: |
          set -e
          ls -la
          cd app
          docker-compose up --build -d

           for i in {1..7}; do
             if curl -f http://localhost:5000; then
               echo "✅ Service is available."
               exit 0
             else
               echo "⏳ Service not available, retrying in 10 seconds..."
               docker-compose logs
               sleep 10
             fi
           done

           echo "❌ Service not available after multiple retries."
           docker-compose logs
           exit 1

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker Image
        run: |
          ls -la
          cd app
          IMAGE_NAME=moshelederman/project-stars
          BUILD_NUMBER=${{ github.run_number }}
          docker build -t $IMAGE_NAME:latest -t $IMAGE_NAME:3.0.$BUILD_NUMBER .

      - name: Push Docker Image
        if: github.ref == 'refs/heads/main'
        run: |
          IMAGE_NAME=moshelederman/project-stars
          BUILD_NUMBER=${{ github.run_number }}
          docker push $IMAGE_NAME:latest
          docker push $IMAGE_NAME:3.0.$BUILD_NUMBER

      - name: Update Helm Chart Version
        run: |
          ls -la
          sed -i "s/^version:.*/version: 0.1.${GITHUB_RUN_NUMBER}/" mychart/Chart.yaml
          cat mychart/Chart.yaml

      # - name: Update Values Image Tag
      #   run: |
      #     ls -la
      #     sed -i "s|^\(\s*tag:\s*\).*|\1 0.1.${GITHUB_RUN_NUMBER}|" mychart/values.yaml
      #     cat mychart/values.yaml

      - name: Install Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash

      - name: Package Helm Chart
        run: |
          helm package mychart
          ls -la
          helm push project-stars-0.1.${GITHUB_RUN_NUMBER}.tgz oci://docker.io/moshelederman

  GKE_Cluster_Setup:
    runs-on: ubuntu-22.04
    needs: Build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: '1.5.0'

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.CREDENTIALS_GKE }}'

      - name: Terraform Init
        run: terraform init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.SECRET_ACCESS_KEY }}
          GOOGLE_CLOUD_KEYFILE_JSON: ${{ secrets.CREDENTIALS_GKE }}
          TF_VAR_GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          TF_VAR_GKE_REGION: ${{ secrets.GKE_REGION }}
          TF_VAR_CREDENTIALS_GKE: '${{ secrets.CREDENTIALS_GKE }}'

      - name: Terraform Plan
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.SECRET_ACCESS_KEY }}
          GOOGLE_CLOUD_KEYFILE_JSON: ${{ secrets.CREDENTIALS_GKE }}
          TF_VAR_GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          TF_VAR_GKE_REGION: ${{ secrets.GKE_REGION }}
          TF_VAR_CREDENTIALS_GKE: '${{ secrets.CREDENTIALS_GKE }}'
        run: terraform plan -out=tfplan -input=false

      - name: Terraform Apply
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.SECRET_ACCESS_KEY }}
          GOOGLE_CLOUD_KEYFILE_JSON: ${{ secrets.CREDENTIALS_GKE }}
          TF_VAR_GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          TF_VAR_GKE_REGION: ${{ secrets.GKE_REGION }}
          TF_VAR_CREDENTIALS_GKE: '${{ secrets.CREDENTIALS_GKE }}'
        run: terraform apply -auto-approve tfplan

  Deploy:
    runs-on: ubuntu-22.04
    needs: GKE_Cluster_Setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Create GCP credentials file
        run: echo "${{ secrets.CREDENTIALS_GKE }}" > $HOME/gcp-key.json        

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: '${{ secrets.CREDENTIALS_GKE }}'

      - name: Install gcloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          version: 'latest'
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.CREDENTIALS_GKE }}

      - name: Install gke-gcloud-auth-plugin via gcloud
        run: |
          gcloud components install gke-gcloud-auth-plugin
        env:
          CLOUDSDK_CORE_DISABLE_PROMPTS: '1'
                
      - name: Configure kubectl to use the plugin
        run: |
          gcloud config set project $GCP_PROJECT_ID
          gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER_NAME }} --region ${{ secrets.GKE_REGION }}
        env:
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          USE_GKE_GCLOUD_AUTH_PLUGIN: True      
      
      - name: Set up gcloud CLI
        run: |
          gcloud config set project $GCP_PROJECT_ID
          gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER_NAME }} --region ${{ secrets.GKE_REGION }}
        env:
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}

      - name: Install Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash

      - name: Install Prometheus, Grafana and Loki
        run: |
          kubectl get namespace monitor || kubectl create namespace monitor 
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo update
          helm upgrade --install prometheus prometheus-community/kube-prometheus-stack -f prometheus/values.yaml -n monitor --create-namespace
          kubectl wait --for condition=established --timeout=30s crd/servicemonitors.monitoring.coreos.com
          helm repo add grafana https://grafana.github.io/helm-charts
          helm repo update
          helm upgrade --install grafana grafana/grafana -n monitor -f grafana/values.yaml
          helm upgrade --install loki grafana/loki-stack -n monitor -f loki/values.yaml --set loki.image.tag=2.9.3  # The upgrade to version `2.9.3` of Loki was performed to resolve a bug where Grafana fails to read data from Loki in other versions.
          kubectl apply -f grafana/grafana-dashboard-configmap.yaml

      - name: Install Helm Stars Project
        run: |
          helm pull oci://docker.io/moshelederman/project-stars --version 0.1.${GITHUB_RUN_NUMBER}
          helm upgrade --install moshe-project project-stars-0.1.${GITHUB_RUN_NUMBER}.tgz
          kubectl rollout restart deployment app-deployment

      - name: Install Argocd
        run: |          
          helm repo add argo https://argoproj.github.io/argo-helm
          helm repo update
          kubectl get namespace argocd || kubectl create namespace argocd
          kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml           
          kubectl apply -f argocd/vault-app.yaml -n argocd   

      - name: Receiving information
        run: |     
          sleep 30
          kubectl get svc -o custom-columns="NAME:.metadata.name,EXTERNAL-IP:.status.loadBalancer.ingress[0].ip" --all-namespaces | grep -v '<none>' | awk '{print "web url: http://"$2":5000"}'
          echo "grafana secret: $(kubectl get secret --namespace monitor grafana -o jsonpath="{.data.admin-password}" | base64 --decode)"
          echo "argocd secret: $(kubectl get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" -n argocd | base64 --decode)"

  Delete_Old_Files:
    runs-on: ubuntu-22.04
    needs: Build
    steps:
      - name: Delete old Files
        run: |
          TOKEN=$(curl -s -H "Content-Type: application/json" -X POST \
            -d '{"username": "${{ secrets.DOCKER_USERNAME }}", "password": "${{ secrets.DOCKER_PASSWORD }}"}' \
            https://hub.docker.com/v2/users/login/ | jq -r .token)

          echo "🔑 Authentication successful"

          DAYS_OLD=25
          CUTOFF_DATE=$(date -d "$DAYS_OLD days ago" +%s)

          # Fetch all tags and sort them by date
          ALL_TAGS=()
          PAGE=1
          while true; do
            echo "📦 Fetching page $PAGE..."
            RESPONSE=$(curl -s -H "Authorization: Bearer $TOKEN" \
              "https://hub.docker.com/v2/repositories/${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}/tags/?page=$PAGE&page_size=100")

            if [[ -z "$RESPONSE" || "$RESPONSE" == "null" || "$(echo $RESPONSE | jq '.results | length')" -eq 0 ]]; then
              echo "✅ No more images found. Stopping."
              break
            fi

            IMAGE_TAGS=$(echo "$RESPONSE" | jq -r '.results[] | {name: .name, date: .last_updated} | @base64')

            for TAG in $IMAGE_TAGS; do
              DATA=$(echo $TAG | base64 --decode)
              IMAGE_NAME=$(echo $DATA | jq -r '.name')
              IMAGE_DATE=$(echo $DATA | jq -r '.date')
              IMAGE_TIMESTAMP=$(date -d "$IMAGE_DATE" +%s)
              
              # Add tags to the list
              ALL_TAGS+=("$IMAGE_TIMESTAMP $IMAGE_NAME")
            done

            PAGE=$((PAGE + 1))
          done

          # Sort tags from newest to oldest
          SORTED_TAGS=($(printf "%s\n" "${ALL_TAGS[@]}" | sort -rn))

          # Keep the 10 most recent tags
          KEEP_TAGS=()
          for i in {0..9}; do
            KEEP_TAGS+=($(echo "${SORTED_TAGS[$i]}" | awk '{print $2}'))
          done

          # Delete old images that are not in the 10 most recent ones
          for TAG in "${SORTED_TAGS[@]}"; do
            IMAGE_TIMESTAMP=$(echo "$TAG" | awk '{print $1}')
            IMAGE_NAME=$(echo "$TAG" | awk '{print $2}')

            if [[ " ${KEEP_TAGS[@]} " =~ " ${IMAGE_NAME} " ]]; then
              echo "🛑 Keeping latest image: $IMAGE_NAME"
              continue
            fi

            if [ "$IMAGE_TIMESTAMP" -lt "$CUTOFF_DATE" ]; then
              echo "🗑️  Deleting old image: $IMAGE_NAME"
              curl -s -X DELETE -H "Authorization: Bearer $TOKEN" \
                "https://hub.docker.com/v2/repositories/${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}/tags/$IMAGE_NAME/"
            else
              echo "✅ Image $IMAGE_NAME is recent, skipping."
            fi
          done