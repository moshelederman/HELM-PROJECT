name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          pip install bandit
      - name: Run Bandit
        run: |
          bandit -r project
   
      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose  

      - name: Load environment variables
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          MYSQL_HOST: ${{ secrets.MYSQL_HOST }}
        run: |
          echo "MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}" >> $GITHUB_ENV
          echo "MYSQL_DATABASE=${MYSQL_DATABASE}" >> $GITHUB_ENV
          echo "MYSQL_USER=${MYSQL_USER}" >> $GITHUB_ENV
          echo "MYSQL_PASSWORD=${MYSQL_PASSWORD}" >> $GITHUB_ENV
          echo "MYSQL_HOST=${MYSQL_HOST}" >> $GITHUB_ENV

      - name: Navigate, stop existing containers, and start new ones
        run: |
          ls -la
          cd app
          docker-compose build

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker Image
        run: |
          ls -la
          cd app
          IMAGE_NAME=moshelederman/project-stars
          BUILD_NUMBER=${{ github.run_number }}
          docker build -t $IMAGE_NAME:latest -t $IMAGE_NAME:3.0.$BUILD_NUMBER .

      - name: Push Docker Image
        if: github.ref == 'refs/heads/main'
        run: |
          IMAGE_NAME=moshelederman/project-stars
          BUILD_NUMBER=${{ github.run_number }}
          docker push $IMAGE_NAME:latest
          docker push $IMAGE_NAME:3.0.$BUILD_NUMBER

      - name: Update Helm Chart Version
        run: |
          ls -la
          sed -i "s/^version:.*/version: 0.1.${GITHUB_RUN_NUMBER}/" mychart/Chart.yaml
          cat mychart/Chart.yaml

      - name: Install Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash

      - name: Package Helm Chart
        run: |
          helm package mychart
          ls -la
          helm push project-stars-0.1.${GITHUB_RUN_NUMBER}.tgz oci://docker.io/moshelederman

  terraform:
    runs-on: ubuntu-22.04
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: '1.5.0'

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.CREDENTIALS_GKE }}'

      - name: Terraform Init
        run: terraform init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.SECRET_ACCESS_KEY }}
          GOOGLE_CLOUD_KEYFILE_JSON: ${{ secrets.CREDENTIALS_GKE }}
          TF_VAR_GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          TF_VAR_GKE_REGION: ${{ secrets.GKE_REGION }}
          TF_VAR_CREDENTIALS_GKE: '${{ secrets.CREDENTIALS_GKE }}'

      - name: Debug GCP Credentials
        run: cat $GOOGLE_APPLICATION_CREDENTIALS

      - name: Debug GCP Project
        run: |
          echo "Project ID: $GCP_PROJECT_ID"
          echo "Service Account: $(gcloud auth list --format='value(account)')"
        
      - name: Debug Terraform Variables
        run: |
          echo "GCP_PROJECT_ID: $TF_VAR_GCP_PROJECT_ID"
          echo "CREDENTIALS_GKE: $TF_VAR_CREDENTIALS_GKE"

      - name: Debug AWS Credentials
        run: aws s3 ls s3://moshe-terrarorm --region us-east-1
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.SECRET_ACCESS_KEY }}

      - name: Terraform Plan
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.SECRET_ACCESS_KEY }}
          GOOGLE_CLOUD_KEYFILE_JSON: ${{ secrets.CREDENTIALS_GKE }}
          TF_VAR_GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          TF_VAR_GKE_REGION: ${{ secrets.GKE_REGION }}
          TF_VAR_CREDENTIALS_GKE: '${{ secrets.CREDENTIALS_GKE }}'
        run: terraform plan -out=tfplan -input=false

      - name: Terraform Apply
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.SECRET_ACCESS_KEY }}
          GOOGLE_CLOUD_KEYFILE_JSON: ${{ secrets.CREDENTIALS_GKE }}
          TF_VAR_GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          TF_VAR_GKE_REGION: ${{ secrets.GKE_REGION }}
          TF_VAR_CREDENTIALS_GKE: '${{ secrets.CREDENTIALS_GKE }}'
        run: terraform apply -auto-approve tfplan

  deploy:
    runs-on: ubuntu-22.04
    needs: terraform
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Create GCP credentials file
        run: echo "${{ secrets.CREDENTIALS_GKE }}" > $HOME/gcp-key.json        

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: '${{ secrets.CREDENTIALS_GKE }}'

      - name: Install gcloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          version: 'latest'
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.CREDENTIALS_GKE }}

      - name: Install gke-gcloud-auth-plugin via gcloud
        run: |
          gcloud components install gke-gcloud-auth-plugin
        env:
          CLOUDSDK_CORE_DISABLE_PROMPTS: '1'
                
      - name: Configure kubectl to use the plugin
        run: |
          gcloud config set project $GCP_PROJECT_ID
          gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER_NAME }} --region ${{ secrets.GKE_REGION }}
        env:
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          USE_GKE_GCLOUD_AUTH_PLUGIN: True      
      
      - name: Set up gcloud CLI
        run: |
          gcloud config set project $GCP_PROJECT_ID
          gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER_NAME }} --region ${{ secrets.GKE_REGION }}
        env:
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}

      - name: Install Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash

      - name: Create monitor namespace if not exists
        run: |
          kubectl get namespace monitor || kubectl create namespace monitor

      - name: Get Latest Image Version
        run: |
          IMAGE_TAG=$(curl -s "https://registry.hub.docker.com/v2/repositories/moshelederman/project-stars/tags" | jq -r '[.results[].name | select(test("^[0-9]+\\.[0-9]+\\.[0-9]+$"))] | sort_by(.) | last')
          echo "Using Docker image version: $IMAGE_TAG"
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      - name: Apply Helm chart
        run: |
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo update
          helm upgrade --install prometheus prometheus-community/prometheus -f prometheus/values.yaml -n monitor --create-namespace
          kubectl wait --for condition=established --timeout=30s crd/servicemonitors.monitoring.coreos.com
          helm pull oci://docker.io/moshelederman/project-stars --version 0.1.${GITHUB_RUN_NUMBER}
          helm upgrade --install moshe-project project-stars-0.1.${GITHUB_RUN_NUMBER}.tgz
          helm repo add grafana https://grafana.github.io/helm-charts
          helm repo update
          helm upgrade --install loki grafana/loki-stack -n monitor --set loki.image.tag=2.9.3
          helm upgrade --install grafana grafana/grafana -n monitor 
          sleep 50
          kubectl get svc -o custom-columns="NAME:.metadata.name,EXTERNAL-IP:.status.loadBalancer.ingress[0].ip" --all-namespaces | grep -v '<none>'
